# TI‑84 Python: Derivative & Integral TABLE (Lookup Only)
# Works on TI‑84 Plus CE Python Edition (TI-Python / MicroPython)
# View common formulas as a paged table. No computation — just quick reference.
# Controls in list view:
#   N = next page, P = previous page, Q = back, S = search (filter), R = reset filter
# In Search, enter a word or fragment (e.g., sin, ln, x^n). Case-insensitive.

# ----------------------------- DATA ---------------------------------
# Each entry: (label, derivative, integral)
# Keep ASCII-friendly notation for TI screen: ln, sqrt(), arcsin, arctan, etc.

ENTRIES = [
    ("Constant c",                "0",                                 "c*x + C"),
    ("x",                         "1",                                 "x^2/2 + C"),
    ("x^n (n!=0)",               "n*x^(n-1)",                         "x^(n+1)/(n+1) + C (n!=-1)"),
    ("1/x",                       "-1/x^2",                            "ln|x| + C (x!=0)"),
    ("sqrt(x)",                  "1/(2*sqrt(x))",                     "(2/3)*x^(3/2) + C"),

    ("sin(x)",                   "cos(x)",                             "-cos(x) + C"),
    ("cos(x)",                   "-sin(x)",                            "sin(x) + C"),
    ("tan(x)",                   "sec(x)^2",                           "-ln|cos(x)| + C"),
    ("sec(x)",                   "sec(x)tan(x)",                       "ln|sec(x)+tan(x)| + C"),
    ("csc(x)",                   "-csc(x)cot(x)",                      "-ln|csc(x)+cot(x)| + C"),
    ("cot(x)",                   "-csc(x)^2",                          "ln|sin(x)| + C"),

    ("arcsin(x)",                "1/sqrt(1-x^2)",                      "x*arcsin(x)+sqrt(1-x^2)+C"),
    ("arccos(x)",                "-1/sqrt(1-x^2)",                     "x*arccos(x)-sqrt(1-x^2)+C"),
    ("arctan(x)",                "1/(1+x^2)",                          "x*arctan(x)-(1/2)ln(1+x^2)+C"),

    ("e^x",                       "e^x",                                "e^x + C"),
    ("a^x (a>0,a!=1)",           "a^x ln(a)",                          "a^x/ln(a) + C"),
    ("ln(x) (x>0)",              "1/x",                                "x*ln(x)-x + C"),

    ("sinh(x)",                   "cosh(x)",                            "cosh(x) + C"),
    ("cosh(x)",                   "sinh(x)",                            "sinh(x) + C"),
    ("tanh(x)",                   "sech(x)^2",                          "ln(cosh(x)) + C"),

    ("k*f(x)",                    "k*f'(x)",                            "k*∫f(x)dx + C"),
    ("f(x)+g(x)",                 "f'(x)+g'(x)",                        "∫f + ∫g + C"),
    ("Product u*v",               "u'v + uv'",                          "(by parts) ∫u dv = u*v - ∫v du"),
    ("Quotient u/v",              "(u'v - uv')/v^2",                    "—"),
    ("Chain f(g(x))",             "f'(g(x))*g'(x)",                     "Use u=g(x), du=g'(x)dx"),

    ("1/(1+x^2)",                 "-2x/(1+x^2)^2",                      "arctan(x) + C"),
    ("1/sqrt(1-x^2)",             "x/(1-x^2)^(3/2)",                    "arcsin(x) + C"),
    ("1/(|x|*sqrt(x^2-1))",       "—",                                  "arcsec(|x|) + C (|x|>1)"),

    ("sec(x)^2",                  "2*sec(x)^2*tan(x)",                  "tan(x) + C"),
    ("csc(x)^2",                  "-2*csc(x)^2*cot(x)",                 "-cot(x) + C"),
    ("sec(x)tan(x)",              "sec(x)tan(x)tan(x)+sec(x)sec(x)",    "sec(x) + C"),
    ("csc(x)cot(x)",              "-csc(x)cot(x)cot(x)-csc(x)csc(x)",   "-csc(x) + C"),

    ("1/x^2",                      "-2/x^3",                             "-1/x + C (x!=0)"),
    ("x*e^x",                     "e^x + x*e^x",                        "(x-1)*e^x + C"),
    ("e^(a*x)",                   "a*e^(a*x)",                           "(1/a)*e^(a*x) + C (a!=0)"),
    ("sin(a*x)",                  "a*cos(a*x)",                          "-1/a * cos(a*x) + C (a!=0)"),
    ("cos(a*x)",                  "-a*sin(a*x)",                         "1/a * sin(a*x) + C (a!=0)"),
]

# Rules page (concise reminders)
RULES = [
    "Product: (uv)' = u'v + uv'",
    "Quotient: (u/v)' = (u'v - uv')/v^2",
    "Chain: d/dx f(g(x)) = f'(g(x)) * g'(x)",
    "Integration by parts: ∫u dv = u v - ∫v du",
    "Substitution: let u=g(x), du=g'(x)dx",
    "Trig identities: 1+tan^2=sec^2, 1+cot^2=csc^2",
]

# ----------------------------- UI -----------------------------------

PAGE_SIZE = 7  # entries per page (fits TI screen nicely)


def lc(s):
    return s.lower()


def filter_entries(keyword):
    if not keyword:
        return ENTRIES
    key = lc(keyword)
    out = []
    for lab, d, I in ENTRIES:
        if key in lc(lab) or key in lc(d) or key in lc(I):
            out.append((lab, d, I))
    return out


def paginate(items, page, page_size):
    n = len(items)
    start = page * page_size
    end = start + page_size
    return items[start:end], n


def show_list(mode, items, page):
    # mode: 'D' derivatives, 'I' integrals
    view = 'DERIVATIVES' if mode == 'D' else 'INTEGRALS'
    chunk, total = paginate(items, page, PAGE_SIZE)
    print("== {} (page {} of {}) ==".format(view, page+1, (total+PAGE_SIZE-1)//PAGE_SIZE))
    idx0 = page*PAGE_SIZE
    for i, (lab, d, I) in enumerate(chunk):
        val = d if mode == 'D' else I
        print("{}. {}".format(idx0+i+1, lab))
        print("   => {}".format(val))
    print("[N]ext  [P]rev  [S]earch  [R]eset  [Q]uit")


def list_loop(mode):
    items = ENTRIES[:]
    page = 0
    while True:
        show_list(mode, items, page)
        cmd = input("> ").strip().lower()
        if cmd == 'n':
            if (page+1)*PAGE_SIZE < len(items):
                page += 1
        elif cmd == 'p':
            if page > 0:
                page -= 1
        elif cmd == 's':
            key = input("Search term: ").strip()
            items = filter_entries(key)
            page = 0
        elif cmd == 'r':
            items = ENTRIES[:]
            page = 0
        elif cmd == 'q' or cmd == '':
            break


def rules_page():
    print("== RULES & HINTS ==")
    for r in RULES:
        print("- ", r)
    input("(Enter to return)")


def main():
    while True:
        print("==== CALC TABLE (TI‑84 Python) ====")
        print("1) Derivatives table")
        print("2) Integrals table")
        print("3) Rules & hints")
        print("4) Quit")
        ch = input("> ").strip()
        if ch == '1':
            list_loop('D')
        elif ch == '2':
            list_loop('I')
        elif ch == '3':
            rules_page()
        elif ch == '4':
            print("Goodbye!")
            break
        else:
            print("Choose 1-4.")

if __name__ == '__main__':
    main()
